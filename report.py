import smtplibfrom email.message import EmailMessageimport asynciofrom concurrent.futures import ThreadPoolExecutor# List of Gmail accounts (email, password)gmail_accounts = [    ('firstemail@gmail.com', 'firstpassword'),    ('secondemail@gmail.com', 'secondpassword'),    ('thirdemail@gmail.com', 'thirdpassword')]# The single channel you want to reportchannel_to_report = '@badchannel'# Reason for reportingreport_reason = 'Violation of Telegram terms (spam/illegal content)'# The SAME message for all Gmail accountsemail_subject = f'Report Telegram Channel: {channel_to_report}'email_body = f'''Hello Telegram Abuse Team,I would like to report the following Telegram channel:Channel Username: {channel_to_report}Reason: {report_reason}Please review this channel.Thank you,Concerned User'''# Function to send the emaildef send_report(email, password):    try:        smtp = smtplib.SMTP_SSL('smtp.gmail.com', 465)        smtp.login(email, password)        msg = EmailMessage()        msg['Subject'] = email_subject        msg['From'] = email        msg['To'] = 'abuse@telegram.org'        msg.set_content(email_body)        smtp.send_message(msg)        smtp.quit()        print(f'[+] Report sent from {email}')    except Exception as e:        print(f'[-] Failed to send from {email}: {e}')# Async function to manage the concurrencyasync def send_reports_concurrently():    # Use ThreadPoolExecutor for concurrent execution of blocking code (sending emails)    with ThreadPoolExecutor() as executor:        loop = asyncio.get_event_loop()        futures = []                # Loop through all Gmail accounts and schedule sending emails concurrently        for email, password in gmail_accounts:            future = loop.run_in_executor(executor, send_report, email, password)            futures.append(future)                # Wait for all futures to complete        await asyncio.gather(*futures)# Main async entry pointasync def main():    await send_reports_concurrently()# Run the asyncio event loopasyncio.run(main())print('All reports sent!')